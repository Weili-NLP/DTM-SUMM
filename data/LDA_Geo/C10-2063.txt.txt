Local Space - Time Smoothing for Version Controlled Documents Unlike static documents , version controlled documents are continuously edited by one or more authors .
Such collaborative revision process makes traditional modeling and visualization techniques inappropriate .
In this paper we propose a new representation based on local spacetime smoothing that captures important revision patterns .
We demonstrate the applicability of our framework using experiments on synthetic and real - world data .
1 Introduction Most computational linguistics studies concentrate on modeling or analyzing documents as sequences of words .
In this paper we consider modeling and visualizing version controlled documents which is the authoring process leading to the final word sequence .
In particular , we focus on documents whose authoring process naturally segments into consecutive versions .
The revisions , as the differences between consecutive versions are often called , may be authored by a single author or by multiple authors working collaboratively .
One popular way to keep track of version controlled documents is using a version control system such as CVS or Subversion ( SVN ).
This is often the case with books or with large computer code projects .
In other cases , more specialized computational infrastructure may be available , as is the case with the authoring API of Wikipedia . org , Slashdot . com , and Google Wave .
Accessing such API provides information about what each revision contains , when was it submitted , and who edited it .
In any case , we formally consider a version controlled document as a sequence of documents d \,..., di indexed by their revision number where di typically contains some locally concentrated additions or deletions , as compared to di -\.
In this paper we develop a continuous representation of version controlled documents that generalizes the locally weighted bag ofwords representation ( Lebanon et al ., 2007 ).
The representation smooths the sequence of version controlled documents across two axes - time t and space s . The time axis t represents the revision and the space axis s represents document position .
The smoothing results in a continuous map from a space - time domain to the simplex of term frequency vectors The mapping above ( V is the vocabulary ) captures the variation in the local distribution ofword content across time and space .
Thus [ y ( s , t )] w is the ( smoothed ) probability of observing word w in space s ( document position ) and time t ( version ).
Geometrically , 7 realizes a divergence - free vector field ( since w [ 7 ( s , t )] w = 1 , 7 has zero divergence ) over the space - time domain Q .
We consider the following four version controlled document analysis tasks .
The first task is visualizing word - content changes with respect to space ( how quickly the document changes its content ), time ( how much does the current version differs from the previous one ), or mixed spacetime .
The second task is detecting sharp transitions or edges in word content .
The third task is concerned with segmenting the space - time domain into a finite partition reflecting word content .
The fourth task is predicting future revisions .
Our main tool in addressing tasks 1 - 4 above is to analyze the values of the vector field 7 and its first order derivatives fields 2 Space - Time Smoothing for Version Controlled Documents With no loss of generality we identify the vocabulary V with positive integers { 1 ,..., V } and represent a word w G V by a unit vector ( all zero exceptfor1atthew - component ) We extend this definition to word sequences thus representing documents ( wi , ..., wN ) ( wi G V ) as sequences of V - dimensional vectors ( e ( wi ),..., e ( wN )).
Similarly , a version controlled document is sequence of documents d ( i ),..., d ( l ) of potentially different lengths a version controlled document as the array e ( w ( i )), .... where columns and rows correspond to space ( document position ) and time ( versions ).
The array ( 4 ) ofhighdimensionalvectors represents the version controlled document without any loss of information .
Nevertheless the high dimensionality of V suggests we smooth the vectors in ( 4 ) with neighboring vectors in order to better capture the local word content .
Specifically we convolve each component of ( 4 ) with a 2 - D smoothing kernel Kh to obtain a smooth vector field 7 over space - time ( Wand and Jones , 1995 ) e . g ., Thus as ( s , t ) vary over a continuous domain Q C R , 7 ( s , t ), which is a weighted combination of neighboring unit vectors , traces a continuous surface in Py C Ry .
Assuming that the kernel Kh is a normalized density it can be shown that Note the slight abuse of notation as V represents both a set of words and an integer V = { 1 ,..., V } with V = \! V \!.
7 ( s , t ) is a non - negative normalized vector i . e ., 7 ( s , t ) G Py ( see ( 1 ) for a definition of Py ) measuring the local distribution of words around the space - time location ( s , t ).
It thus extends the concept of lowbow ( locally weighted bag of words ) introduced in ( Lebanon et al ., 2007 ) from single documents to version controlled documents .
One difficulty with the above scheme is that the document versions di ,..., dl may be of different lengths .
We consider two ways to resolve this issue .
The first pads shorter document versions with zero vectors as needed .
We refer to the resulting representation 7 as the non - normalized representation .
The second approach normalizes all document versions to a common length , say nj = i N ( j ).
That is each word in the first document is expanded into Ilj = i N ( j ) words , each word in the second document is expanded into Ilj = 2 N ( j ) words etc .
We refer to the resulting representation 7 as the normalized representation .
The non - normalized representation has the advantage of conveying absolute lengths .
For example , it makes it possible to track how different portions of the document grow or shrink ( in terms of number of words ) with the version number .
The normalized representation has the advantage of conveying lengths relative to the document length .
For example , it makes it possible to track how different portions of the document grow or shrink with the version number relative to the total document length .
In either case , the space - time domain Q on which 7 is defined ( 5 ) is a two dimensional rectangular domain Q = [ 0 , 1 ] x [ 0 , J ].
Before proceeding to examine how 7 may be used in the four tasks described in Section 1 we demonstrate our framework with a simple low dimensional example .
Assuming a vocabulary of two words V = { 1 , 2 } we can visualize 7 by displaying its first component as a grayscale image ( since [ 7 ( s , t )] 2 = 1 â€” [ 7 ( s , t )] i the second component is redundant ).
Specifically , we created a version controlled document with three contiguous segments whose { 1 , 2 } words were sampled from Bernoulli distributions with parameters 0 . 3 ( first segment ), 0 . 7 ( second segment ), and 0 . 5 ( third segment ).
That is , the probability of getting 1 is highest for the second segment , equal for the third and lowest for the first segment .
The initial lengths of the segments were Fi gure 1 : Four space - time representations of a simple synthetic version controlled document over V = { 1 , 2 } ( see text for more details ).
The left panel displays the first component of ( 4 ) ( non - smoothed array of unit vectors corresponding to words ).
The second and third panels display [ 7 ( s , t )] i for the non - normalized and normalized representations respectively .
The fourth panel displays the gradient vector field ( Ys ( s , t ), Yt ( s , t )) ( contour levels represent the gradient magnitude ).
The black portions of the first two panels correspond to zero padding due to unequal lengths of the different versions .
30 , 40 and 120 words with the first segment increasing and the third segment decreasing at half the rate of the first segment with each revision .
The length of the second segment was constant across the different versions .
Figure 1 displays the nonsmoothed ragged array ( 4 ) ( left ), the non - normalized [ 7 ( s , t )] i ( middle left ) and the normalized [ 7 ( s , t )] i ( middle right ).
While the left panel doesn ' t distinguish much between the second and third segment the two smoothed representations display a nice segmentation of the space - time domain into three segments , each with roughly uniform values .
The non - normalized representation ( middle left ) makes it easy to see that the total length of the version controlled document is increasing but it is not easy to judge what happens to the relative sizes of the three segments .
The normalized representation ( middle right ) makes it easy to see that the first segment increases in size , the second is constant , and the third decreases in size .
It is also possible to notice that the growth rate of the first segment is higher than the decay rate of the third .
3 Visualizing Change in Space - Time We apply the space - time representation to four tasks .
The first task , visualizing change , is described in this section .
The remaining three tasks are described in the next three section .
The space - time domain Q represents the union of all document versions and all document positions .
Some parts of Q are more homogeneous and some are less in terms of their local word distribution .
Locations in Q where the local word distribution substantially diverges from its neighbors correspond to sharp content transitions .
On the other hand , locations whose word distribution is more or less constant correspond to slow content variation .
We distinguish between three different types of changes .
The first occurs when the word content changes substantially between neighboring document positions within a certain document version .
As an example consider a document location whose content shifts from high level introductory motivation to a detailed technical description .
Such change is represented by A second type of change occurs when a certain document position undergoes substantial change in local word distribution across neighboring versions .
An example is erroneous content in one version being heavily revised in the next version .
Such change along the time axis corresponds to the magnitude of Expression ( 6 ) may be used to measure the instantaneous rate of change in the local word distribution .
Alternatively , integrating ( 6 ) provides a global measure ofchange with h ( s ) describing the total amount of spatial change across all revisions and g ( t ) describing Figure 2 : Gradient and edges for a portion of the version controlled Wikipedia Religion article .
The left panel displays \\ Afs ( s , t ) \!\!
( amount of change across document locations for different versions ).
The second panel displays \!\! 7t ( s , t )\!\!
( amount of change across versions for different document positions ).
The third panel displays the local maxima of \!\! 7a ( s , t ) W + \!\! 7t ( s , t )\!\!
which correspond to potential edges , either vertical lines ( section and subsection boundaries ) or horizontal lines ( between substantial revisions ).
The fourth panel displays boundaries of sections and subsections as black and gray lines respectively .
the total amount of version change across different document positions .
h ( s ) may be used to detect document regions undergoing repeated substantial content revisions and g ( t ) may be used to detect revisions in which substantial content has been modified across the entire document .
We conclude with the integrated directional derivative where a :[ 0 , 1 ] â€” Q is a parameterized curve in the space - time and a its tangent vector .
Expression ( 8 ) may be used to measure change along a dynamically moving document anchor such as the boundary between two book chapters .
The space coordinate of such anchor shifts with the version number ( due to the addition and removal of content across versions ) and so integrating the gradient across one of the two axis as in ( 7 ) is not appropriate .
Defining a ( r ) to be a parameterized curve in space - time realizing the anchor positions ( s , t ) G Q across multiple revisions , ( 8 ) measures the amount of change at the anchor point .
3 . 1 Experiments The right panel of Figure 1 shows the gradient vector field corresponding to the synthetic version controlled document described in the previous section .
As expected , it tends to be orthogonal to the segment boundaries .
Its magnitude is displayed by the contour lines which show highest magnitudes around segment boundaries .
Figure 2 shows the norm \\ 7s ( s , t )\\ 2 ( left ),\\ 7t ( s , t ) y2 ( middle left ) and the local maxima of \\ 7s ( s , t )\\ + \\ 7t ( s , t )\\ ( middle right ) for a portion of the version controlled Wikipedia Religion article .
The first panel shows the amount of change in local word distribution within documents .
High values correspond to boundaries between sections , topics or other document segments .
The second panel shows the amount of change as one version is replaced with another .
It shows which revisions change the word distributions substantially and which result in a relatively minor change .
The third panel shows only the local maxima which correspond to edges between topics or segments ( vertical lines ) or revisions ( horizontal lines ).
4 Edge Detection In many cases documents may be divided to semantically coherent segments .
Examples of text segments include individual news stories in streaming broadcast news transcription , sections in article or books , and individual messages in a discussion board or an email trail .
For non - version controlled documents finding the text segments is equivalent to finding the boundaries or edges between consecutive segments .
See ( Hearst , 1997 ; Beeferman et al ., 1999 ; McCallum et al ., 2000 ) for several recent studies in this area .
Things get a bit more complicated in the case of version controlled documents .
Segments , and their boundaries exist in each version .
As in case of image processing , we may view segment boundaries as edges in the space - time domain Q .
These boundaries separate the segments from each other , much like borders separate countries Figure 3 : Gradient and edges of a portion of the version controlled Atlanta Wikipedia article ( top row ) and the Google Wave Amazon Kindle FAQ ( bottom row ).
The left column displays the magnitude of the gradient in both space and time \!\! 7s ( s , t )\!\!
The middle column displays the local maxima of the gradient magnitude ( left column ).
The right column displays the actual segment boundaries as vertical lines ( section headings for Wikipedia and author change in Google Wave ).
The gradient maxima corresponding to vertical lines in the middle column matches nicely the Wikipedia section boundaries .
The gradient maxima corresponding to horizontal lines in the middle column correspond nicely to major revisions indicated by a discontinuities in the location ofthe section boundaries .
in a two dimensional geographical map .
Assuming all edges are correctly identified , we can easily identify the segments as the interior points of the closed boundaries .
In general , however , attempts to identify segment boundaries or edges will only be partially successful .
As a result predicted edges in practice are not closed and do not lead to interior segments .
We consider now the task of predicting segment boundaries or edges in Q and postpone the task ofpredicting a segmentation to the next section .
Edges , or transitions between segments , correspond to abrupt changes in the local word distribution .
We thus characterize them as points in Q having high gradient value .
In particular , we distinguish between vertical edges ( transitions across document positions ), horizontal edges ( transitions across versions ), and diagonal edges ( transitions across both document position and version ).
These three types of edges may be diagnosed based on the magnitudes of 7s , 7t , and a + a27t respectively .
4 . 1 Experiments Besides the synthetic data results in Figure 2 , we conducted edge detection experiments on six different real world datasets .
Five datasets are Wikipedia . com articles : Atlanta , Religion , Language , European Union , and Beijing .
Religion and European Union are version controlled documents with relatively frequent updates , while Atlanta , language , and Beijing have less frequent changes .
The sixth dataset is the Google Wave Amazon Kindle FAQ which is a less structured version controlled document .
Preprocessing included removing html tags and pictures , word stemming , stop - word removal , and removing any non alphabetic characters ( numbers and punctuations ).
The section heading information of Wikipedia and the information of author of each posting in Google Wave is used as ground truth for segment boundaries .
This information was separated from the dataset and was used for training and evaluation ( on testing set ).
Figure 3 displays a gradient information , local maxima , and ground truth segment boundaries for Article Rev .
p ( y ) Error Rate F1 Measure Size abc a bc Figure 4 : Test set error rate and F1 measure for edge prediction ( section boundaries in Wikipedia articles and author change in Google Wave ).
The space - time domain O was divided to a grid with each cell labeled edge ( y = 1 ) or no edge ( y = 0 ) depending on whether it contained any edges .
Method a corresponds to a predictor that always selects the majority class .
Method b corresponds to the TextTiling test segmentation algorithm ( Hearst , 1997 ) without paragraph boundaries information .
Method c corresponds to a logistic regression classifier whose feature set is composed of statistical summaries ( mean , median , max , min ) of Ys ( s , t ) within the grid cell in question as well as neighboring cells .
the version controlled Wikipedia articles Religion and Atlanta .
The local gradient maxima nicely match the segment boundaries which lead us to consider training a logistic regression classifier on a feature set composed of gradient value statistics ( min , max , mean , median of \\ 7s ( s , t )\\ in the appropriate location as well as its neighbors ( the space - time domain Q was divided into a finite grid where each cell either contained an edge ( y = 1 ) or did not ( y = 0 )).
The table in Figure 4 displays the test set accuracy and F1 measure of three predictors : our logistic regression ( method c ) as well as two baselines : predicting edge / no - edge based on the marginal p ( y ) distribution ( method a ) and TextTiling ( method b ) ( Hearst , 1997 ) which is a popular text segmentation algorithm .
Since we do not assume paragraph information in our experiment we ignored this component and considered the document as a sequence with w = 20 and 29 minimum depth gaps parameters ( see ( Hearst , 1997 )).
We conclude from the figure that the gradient information leads to better prediction than TextTiling ( on both accuracy and F1 measure ).
5Segmentation As mentioned in the previous section , predicting edges may not result in closed boundaries .
It is possible to analyze the location and direction of the predicted edges and aggregate them into a sequence of closed boundaries surrounding the segments .
We take a different approach and partition points in Q to k distinct values or segments based on local word content and space - time proximity .
For two points ( si , t2 ), ( s2 , t2 ) G Q to be in the same segment we expect 7 ( s1 , t1 ) to be similar to 7 ( s2 , t2 ) and for ( si , ti ) to be close to ( s2 , t2 ).
The first condition asserts that the two locations discuss the same topic .
The second condition asserts that the two locations are not too far from each other in the space time domain .
More specifically , we propose to segment Q by clustering its points based on the following geometry where du : PV x PV â€” R is Hellinger distance The weights ci , c2 are used to balance the contributions of word content similarity with the similarity in time and space .
5 . 1 Experiments Figure 5 displays the ground truth segment boundaries and the segmentation results obtained by applying k - means clustering ( k = 11 ) to the metric ( 9 ).
The figure shows that the predicted segments largely match actual edges in the documents even though no edge or gradient information was used in the segmentation process .
6 Predicting Future Operations The fourth and final task is predicting a future revision d1 + i based on the smoothed representation of the present and past versions di ,..., di .
In Figure 5 : Predicted segmentation ( top ) and ground truth segment boundaries ( bottom ) of portions of the version controlled Wikipedia articles Religion ( left ), Atlanta ( middle ) and the Google Wave Amazon Kindle FAQ ( right ).
The predicted segments match the ground truth segment boundaries .
Note that the first 100 revisions are used in Google Wave result .
The proportion of the segments that appeared in the beginning is keep decreasing while the revisions increases and new segments appears .
terms of Q , this means predicting features associated with y ( s , t ), t > t ' based on y ( s , t ), t < t '.
6 . 1 Experiments We concentrate on predicting whether Wikipedia edits are reversed in the next revision .
This action , marked by a label UNDO or REVERT in the Wikipedia API , is important for preventing content abuse or removing immature content ( by predicting ahead of time suspicious revisions ).
We predict whether a version will undergo UNDO in the next version using a support vector machine based on statistical summaries ( mean , median , min , max ) of the following feature set \!\! Ys ( s , t )\!\!, \!\! 7s ( s , t )\!\!, Hy *( s , t )\!\!
Figure 6 shows the test set error and F1 measure for the logistic regression based on the smoothed space - time representation ( method c ), as well as two baselines .
The first baseline ( method a ) predicts the majority class and the second baseline ( method b ) is a logistic regression based on the term frequency content of the current test version .
Using the derivatives of Y , we obtain a prediction that is better than choosing majority class or logistic regression based on word content .
We thus conclude that the derivatives above provide more useful information ( resulting in lower error and higher F1 ) for predicting future operations than word content features .
7 Related Work While document analysis is a very active research area , there has been relatively little work on examining version controlled documents .
Our approach is the first to consider version controlled documents as continuous mappings from a spacetime domain to the space of local word distributions .
It extends the ideas in ( Lebanon et al ., 2007 ) of using kernel smoothing to create a continuous representation of documents .
In fact , our framework generalizes ( Lebanon et al ., 2007 ) as it reverts to it in the case of a single revision .
Other approaches to sequential analysis of documents concentrate on discrete spaces and discrete models , with the possible extension of ( Wang et al ., 2009 ).
Related papers on segmentation and sequential document analysis are ( Hearst , Size abc a bc Article Rev .
p ( y ) Error Rate F1 Measure Figure 6 : Error rate and F1 measure over held out test set of predicting future UNDO operation in Wikipedia articles .
Method a corresponds to a predictor that always selects the majority class .
Method b corresponds to a logistic regression based on the term frequency vector of the current version .
Method c corresponds a logistic regression that uses summaries ( mean , median , max , min ) of \!\! ys ( s , t ) \!\!, \!\! ys ( s , t ) \!\!, g ( t ), and h ( s ).
spirit to our approach .
An influential model for topic modeling within and across documents is latent Dirichlet allocation ( Blei et al ., 2003 ; Blei and Lafferty , 2006 ).
Our approach differs in being fully non - parametric and in that it does not require iterative parametric estimation or integration .
The interpretation of local word smoothing as a non - parametric statistical estimator ( Lebanon et al ., 2007 ) may be extended to our paper in a straightforward manner .
Several attempts have been made to visualize themes and topics in documents , either by keeping track of the word distribution or by dimensionality reduction techniques e . g ., ( Fortuna et al ., 2005 ; Havre et al ., 2002 ; Spoerri , 1993 ; Thomas and Cook , 2005 ).
Such studies tend to visualize a corpus of unrelated documents as opposed to ordered collections of revisions which we explore .
8 Summary and Discussion The task of analyzing and visualizing version controlled document is an important one .
It allows external control and monitoring of collaboratively authored resources such as Wikipedia , Google Wave , and CVS or SVN documents .
Our framework is the first to develop analysis and visualization tools in this setting .
It presents a new representation for version controlled documents that uses local smoothing to map a space - time domain Q to the simplex of tf vectors PV .
We demonstrate the applicability of the representation for four tasks : visualizing change , predicting edges , segmentation , and predicting future revision operations .
Visualizing changes may highlight significant structural changes for the benefit of users and help the collaborative authoring process .
Improved edge prediction and text segmentation may assist in discovering structural or semantic changes and their evolution with the authoring process .
Predicting future operation may assist authors as well as prevent abuse in coauthoring projects such as Wikipedia .
The experiments described in this paper were conducted on synthetic , Wikipedia and Google Wave articles .
They show that the proposed formalism achieves good performance both qualitatively and quantitatively as compared to standard baseline algorithms .
It is intriguing to consider the similarity between our representation and image processing .
Predicting segment boundaries are similar to edge detection in images .
Segmenting version controlled documents may be reduced to image segmentation .
Predicting future operations is similar to completing image parts based on the remaining pixels and a statistical model .
Due to its long and successful history , image processing is a good candidate for providing useful tools for version controlled document analysis .
Our framework facilitates this analogy and we believe is likely to result in novel models and analysis tools inspired by current image processing paradigms .
A few potential examples are wavelet filtering , image compression , and statistical models such as Markov random fields .
Acknowledgements The research described in this paper was funded in part by NSF grant IIS - 0746853 .
